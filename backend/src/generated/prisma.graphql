# source: https://eu1.prisma.sh/hugobrancoc-5773e9/picus/dev
# timestamp: Wed Mar 27 2019 15:43:23 GMT+0000 (Hora padr√£o da Europa Ocidental)

type AggregateCartItem {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateComCourse {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateCourseInterest {
  count: Int!
}

type AggregateCourseVideos {
  count: Int!
}

type AggregateInterest {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserCourse {
  count: Int!
}

type AggregateUserInterest {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type AggregateWishlist {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type CartItem implements Node {
  id: ID!
  user: User!
  course: Course!
}

"""
A connection to a list of items.
"""
type CartItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  id: ID
  user: UserCreateOneWithoutCartInput!
  course: CourseCreateOneInput!
}

input CartItemCreateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateWithoutUserInput {
  id: ID
  course: CourseCreateOneInput!
}

"""
An edge in a connection.
"""
type CartItemEdge {
  """
  The item at the end of the edge.
  """
  node: CartItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CartItemPreviousValues {
  id: ID!
}

input CartItemScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CartItemScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CartItemScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CartItemScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CartItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CartItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CartItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
}

input CartItemUpdateInput {
  user: UserUpdateOneRequiredWithoutCartInput
  course: CourseUpdateOneRequiredInput
}

input CartItemUpdateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  delete: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [CartItemScalarWhereInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutUserInput!]
}

input CartItemUpdateWithoutUserDataInput {
  course: CourseUpdateOneRequiredInput
}

input CartItemUpdateWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutUserDataInput!
}

input CartItemUpsertWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutUserDataInput!
  create: CartItemCreateWithoutUserInput!
}

input CartItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CartItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CartItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CartItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  user: UserWhereInput
  course: CourseWhereInput
}

input CartItemWhereUniqueInput {
  id: ID
}

type Category implements Node {
  id: ID!
  name: String!
}

"""
A connection to a list of items.
"""
type CategoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

"""
An edge in a connection.
"""
type CategoryEdge {
  """
  The item at the end of the edge.
  """
  node: Category!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategorySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CategorySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  name: String
}

input CategoryUpdateInput {
  name: String
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneRequiredInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CategoryWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CategoryWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CategoryWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input CategoryWhereUniqueInput {
  id: ID
}

type ComCourse implements Node {
  id: ID!
  comment: String!
  user: User!
  course: Course!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type ComCourseConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ComCourseEdge]!
  aggregate: AggregateComCourse!
}

input ComCourseCreateInput {
  id: ID
  comment: String!
  user: UserCreateOneInput!
  course: CourseCreateOneInput!
}

"""
An edge in a connection.
"""
type ComCourseEdge {
  """
  The item at the end of the edge.
  """
  node: ComCourse!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ComCourseOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ComCoursePreviousValues {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ComCourseSubscriptionPayload {
  mutation: MutationType!
  node: ComCourse
  updatedFields: [String!]
  previousValues: ComCoursePreviousValues
}

input ComCourseSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ComCourseSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ComCourseSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ComCourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ComCourseWhereInput
}

input ComCourseUpdateInput {
  comment: String
  user: UserUpdateOneRequiredInput
  course: CourseUpdateOneRequiredInput
}

input ComCourseUpdateManyMutationInput {
  comment: String
}

input ComCourseWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ComCourseWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ComCourseWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ComCourseWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  comment: String

  """
  All values that are not equal to given value.
  """
  comment_not: String

  """
  All values that are contained in given list.
  """
  comment_in: [String!]

  """
  All values that are not contained in given list.
  """
  comment_not_in: [String!]

  """
  All values less than the given value.
  """
  comment_lt: String

  """
  All values less than or equal the given value.
  """
  comment_lte: String

  """
  All values greater than the given value.
  """
  comment_gt: String

  """
  All values greater than or equal the given value.
  """
  comment_gte: String

  """
  All values containing the given string.
  """
  comment_contains: String

  """
  All values not containing the given string.
  """
  comment_not_contains: String

  """
  All values starting with the given string.
  """
  comment_starts_with: String

  """
  All values not starting with the given string.
  """
  comment_not_starts_with: String

  """
  All values ending with the given string.
  """
  comment_ends_with: String

  """
  All values not ending with the given string.
  """
  comment_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  user: UserWhereInput
  course: CourseWhereInput
}

input ComCourseWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  videos(
    where: CourseVideosWhereInput
    orderBy: CourseVideosOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CourseVideos!]
  title: String
  description: String!
  thumbnail: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: State
  price: Float!
  category: Category!
  interest(
    where: CourseInterestWhereInput
    orderBy: CourseInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CourseInterest!]
}

"""
A connection to a list of items.
"""
type CourseConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  title: String
  description: String!
  thumbnail: String!
  state: State
  price: Float!
  videos: CourseVideosCreateManyWithoutCourseInput
  user: UserCreateOneInput!
  category: CategoryCreateOneInput!
  interest: CourseInterestCreateManyWithoutCourseInput
}

input CourseCreateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutInterestInput {
  create: CourseCreateWithoutInterestInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutVideosInput {
  create: CourseCreateWithoutVideosInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutInterestInput {
  id: ID
  title: String
  description: String!
  thumbnail: String!
  state: State
  price: Float!
  videos: CourseVideosCreateManyWithoutCourseInput
  user: UserCreateOneInput!
  category: CategoryCreateOneInput!
}

input CourseCreateWithoutVideosInput {
  id: ID
  title: String
  description: String!
  thumbnail: String!
  state: State
  price: Float!
  user: UserCreateOneInput!
  category: CategoryCreateOneInput!
  interest: CourseInterestCreateManyWithoutCourseInput
}

"""
An edge in a connection.
"""
type CourseEdge {
  """
  The item at the end of the edge.
  """
  node: Course!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type CourseInterest implements Node {
  id: ID!
  interest: Interest!
  course: Course!
}

"""
A connection to a list of items.
"""
type CourseInterestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CourseInterestEdge]!
  aggregate: AggregateCourseInterest!
}

input CourseInterestCreateInput {
  id: ID
  interest: InterestCreateOneInput!
  course: CourseCreateOneWithoutInterestInput!
}

input CourseInterestCreateManyWithoutCourseInput {
  create: [CourseInterestCreateWithoutCourseInput!]
  connect: [CourseInterestWhereUniqueInput!]
}

input CourseInterestCreateWithoutCourseInput {
  id: ID
  interest: InterestCreateOneInput!
}

"""
An edge in a connection.
"""
type CourseInterestEdge {
  """
  The item at the end of the edge.
  """
  node: CourseInterest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CourseInterestOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CourseInterestPreviousValues {
  id: ID!
}

input CourseInterestScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseInterestScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseInterestScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseInterestScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type CourseInterestSubscriptionPayload {
  mutation: MutationType!
  node: CourseInterest
  updatedFields: [String!]
  previousValues: CourseInterestPreviousValues
}

input CourseInterestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseInterestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseInterestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseInterestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseInterestWhereInput
}

input CourseInterestUpdateInput {
  interest: InterestUpdateOneRequiredInput
  course: CourseUpdateOneRequiredWithoutInterestInput
}

input CourseInterestUpdateManyWithoutCourseInput {
  create: [CourseInterestCreateWithoutCourseInput!]
  connect: [CourseInterestWhereUniqueInput!]
  set: [CourseInterestWhereUniqueInput!]
  disconnect: [CourseInterestWhereUniqueInput!]
  delete: [CourseInterestWhereUniqueInput!]
  update: [CourseInterestUpdateWithWhereUniqueWithoutCourseInput!]
  deleteMany: [CourseInterestScalarWhereInput!]
  upsert: [CourseInterestUpsertWithWhereUniqueWithoutCourseInput!]
}

input CourseInterestUpdateWithoutCourseDataInput {
  interest: InterestUpdateOneRequiredInput
}

input CourseInterestUpdateWithWhereUniqueWithoutCourseInput {
  where: CourseInterestWhereUniqueInput!
  data: CourseInterestUpdateWithoutCourseDataInput!
}

input CourseInterestUpsertWithWhereUniqueWithoutCourseInput {
  where: CourseInterestWhereUniqueInput!
  update: CourseInterestUpdateWithoutCourseDataInput!
  create: CourseInterestCreateWithoutCourseInput!
}

input CourseInterestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseInterestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseInterestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseInterestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  interest: InterestWhereInput
  course: CourseWhereInput
}

input CourseInterestWhereUniqueInput {
  id: ID
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  thumbnail_ASC
  thumbnail_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  state_ASC
  state_DESC
  price_ASC
  price_DESC
}

type CoursePreviousValues {
  id: ID!
  title: String
  description: String!
  thumbnail: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: State
  price: Float!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateDataInput {
  title: String
  description: String
  thumbnail: String
  state: State
  price: Float
  videos: CourseVideosUpdateManyWithoutCourseInput
  user: UserUpdateOneRequiredInput
  category: CategoryUpdateOneRequiredInput
  interest: CourseInterestUpdateManyWithoutCourseInput
}

input CourseUpdateInput {
  title: String
  description: String
  thumbnail: String
  state: State
  price: Float
  videos: CourseVideosUpdateManyWithoutCourseInput
  user: UserUpdateOneRequiredInput
  category: CategoryUpdateOneRequiredInput
  interest: CourseInterestUpdateManyWithoutCourseInput
}

input CourseUpdateManyMutationInput {
  title: String
  description: String
  thumbnail: String
  state: State
  price: Float
}

input CourseUpdateOneRequiredInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
}

input CourseUpdateOneRequiredWithoutInterestInput {
  create: CourseCreateWithoutInterestInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutInterestDataInput
  upsert: CourseUpsertWithoutInterestInput
}

input CourseUpdateOneRequiredWithoutVideosInput {
  create: CourseCreateWithoutVideosInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutVideosDataInput
  upsert: CourseUpsertWithoutVideosInput
}

input CourseUpdateWithoutInterestDataInput {
  title: String
  description: String
  thumbnail: String
  state: State
  price: Float
  videos: CourseVideosUpdateManyWithoutCourseInput
  user: UserUpdateOneRequiredInput
  category: CategoryUpdateOneRequiredInput
}

input CourseUpdateWithoutVideosDataInput {
  title: String
  description: String
  thumbnail: String
  state: State
  price: Float
  user: UserUpdateOneRequiredInput
  category: CategoryUpdateOneRequiredInput
  interest: CourseInterestUpdateManyWithoutCourseInput
}

input CourseUpsertNestedInput {
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseUpsertWithoutInterestInput {
  update: CourseUpdateWithoutInterestDataInput!
  create: CourseCreateWithoutInterestInput!
}

input CourseUpsertWithoutVideosInput {
  update: CourseUpdateWithoutVideosDataInput!
  create: CourseCreateWithoutVideosInput!
}

type CourseVideos implements Node {
  id: ID!
  course: Course!
  video: Video
}

"""
A connection to a list of items.
"""
type CourseVideosConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CourseVideosEdge]!
  aggregate: AggregateCourseVideos!
}

input CourseVideosCreateInput {
  id: ID
  course: CourseCreateOneWithoutVideosInput!
  video: VideoCreateOneInput
}

input CourseVideosCreateManyWithoutCourseInput {
  create: [CourseVideosCreateWithoutCourseInput!]
  connect: [CourseVideosWhereUniqueInput!]
}

input CourseVideosCreateWithoutCourseInput {
  id: ID
  video: VideoCreateOneInput
}

"""
An edge in a connection.
"""
type CourseVideosEdge {
  """
  The item at the end of the edge.
  """
  node: CourseVideos!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CourseVideosOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CourseVideosPreviousValues {
  id: ID!
}

input CourseVideosScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseVideosScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseVideosScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseVideosScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type CourseVideosSubscriptionPayload {
  mutation: MutationType!
  node: CourseVideos
  updatedFields: [String!]
  previousValues: CourseVideosPreviousValues
}

input CourseVideosSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseVideosSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseVideosSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseVideosSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseVideosWhereInput
}

input CourseVideosUpdateInput {
  course: CourseUpdateOneRequiredWithoutVideosInput
  video: VideoUpdateOneInput
}

input CourseVideosUpdateManyWithoutCourseInput {
  create: [CourseVideosCreateWithoutCourseInput!]
  connect: [CourseVideosWhereUniqueInput!]
  set: [CourseVideosWhereUniqueInput!]
  disconnect: [CourseVideosWhereUniqueInput!]
  delete: [CourseVideosWhereUniqueInput!]
  update: [CourseVideosUpdateWithWhereUniqueWithoutCourseInput!]
  deleteMany: [CourseVideosScalarWhereInput!]
  upsert: [CourseVideosUpsertWithWhereUniqueWithoutCourseInput!]
}

input CourseVideosUpdateWithoutCourseDataInput {
  video: VideoUpdateOneInput
}

input CourseVideosUpdateWithWhereUniqueWithoutCourseInput {
  where: CourseVideosWhereUniqueInput!
  data: CourseVideosUpdateWithoutCourseDataInput!
}

input CourseVideosUpsertWithWhereUniqueWithoutCourseInput {
  where: CourseVideosWhereUniqueInput!
  update: CourseVideosUpdateWithoutCourseDataInput!
  create: CourseVideosCreateWithoutCourseInput!
}

input CourseVideosWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseVideosWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseVideosWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseVideosWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  course: CourseWhereInput
  video: VideoWhereInput
}

input CourseVideosWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CourseWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CourseWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  thumbnail: String

  """
  All values that are not equal to given value.
  """
  thumbnail_not: String

  """
  All values that are contained in given list.
  """
  thumbnail_in: [String!]

  """
  All values that are not contained in given list.
  """
  thumbnail_not_in: [String!]

  """
  All values less than the given value.
  """
  thumbnail_lt: String

  """
  All values less than or equal the given value.
  """
  thumbnail_lte: String

  """
  All values greater than the given value.
  """
  thumbnail_gt: String

  """
  All values greater than or equal the given value.
  """
  thumbnail_gte: String

  """
  All values containing the given string.
  """
  thumbnail_contains: String

  """
  All values not containing the given string.
  """
  thumbnail_not_contains: String

  """
  All values starting with the given string.
  """
  thumbnail_starts_with: String

  """
  All values not starting with the given string.
  """
  thumbnail_not_starts_with: String

  """
  All values ending with the given string.
  """
  thumbnail_ends_with: String

  """
  All values not ending with the given string.
  """
  thumbnail_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  state: State

  """
  All values that are not equal to given value.
  """
  state_not: State

  """
  All values that are contained in given list.
  """
  state_in: [State!]

  """
  All values that are not contained in given list.
  """
  state_not_in: [State!]
  price: Float

  """
  All values that are not equal to given value.
  """
  price_not: Float

  """
  All values that are contained in given list.
  """
  price_in: [Float!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Float!]

  """
  All values less than the given value.
  """
  price_lt: Float

  """
  All values less than or equal the given value.
  """
  price_lte: Float

  """
  All values greater than the given value.
  """
  price_gt: Float

  """
  All values greater than or equal the given value.
  """
  price_gte: Float
  videos_every: CourseVideosWhereInput
  videos_some: CourseVideosWhereInput
  videos_none: CourseVideosWhereInput
  user: UserWhereInput
  category: CategoryWhereInput
  interest_every: CourseInterestWhereInput
  interest_some: CourseInterestWhereInput
  interest_none: CourseInterestWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Interest implements Node {
  id: ID!
  name: String!
  thumbnail: String!
}

"""
A connection to a list of items.
"""
type InterestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [InterestEdge]!
  aggregate: AggregateInterest!
}

input InterestCreateInput {
  id: ID
  name: String!
  thumbnail: String!
}

input InterestCreateOneInput {
  create: InterestCreateInput
  connect: InterestWhereUniqueInput
}

"""
An edge in a connection.
"""
type InterestEdge {
  """
  The item at the end of the edge.
  """
  node: Interest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum InterestOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  thumbnail_ASC
  thumbnail_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InterestPreviousValues {
  id: ID!
  name: String!
  thumbnail: String!
}

type InterestSubscriptionPayload {
  mutation: MutationType!
  node: Interest
  updatedFields: [String!]
  previousValues: InterestPreviousValues
}

input InterestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InterestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [InterestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [InterestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InterestWhereInput
}

input InterestUpdateDataInput {
  name: String
  thumbnail: String
}

input InterestUpdateInput {
  name: String
  thumbnail: String
}

input InterestUpdateManyMutationInput {
  name: String
  thumbnail: String
}

input InterestUpdateOneRequiredInput {
  create: InterestCreateInput
  connect: InterestWhereUniqueInput
  update: InterestUpdateDataInput
  upsert: InterestUpsertNestedInput
}

input InterestUpsertNestedInput {
  update: InterestUpdateDataInput!
  create: InterestCreateInput!
}

input InterestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [InterestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [InterestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [InterestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  thumbnail: String

  """
  All values that are not equal to given value.
  """
  thumbnail_not: String

  """
  All values that are contained in given list.
  """
  thumbnail_in: [String!]

  """
  All values that are not contained in given list.
  """
  thumbnail_not_in: [String!]

  """
  All values less than the given value.
  """
  thumbnail_lt: String

  """
  All values less than or equal the given value.
  """
  thumbnail_lte: String

  """
  All values greater than the given value.
  """
  thumbnail_gt: String

  """
  All values greater than or equal the given value.
  """
  thumbnail_gte: String

  """
  All values containing the given string.
  """
  thumbnail_contains: String

  """
  All values not containing the given string.
  """
  thumbnail_not_contains: String

  """
  All values starting with the given string.
  """
  thumbnail_starts_with: String

  """
  All values not starting with the given string.
  """
  thumbnail_not_starts_with: String

  """
  All values ending with the given string.
  """
  thumbnail_ends_with: String

  """
  All values not ending with the given string.
  """
  thumbnail_not_ends_with: String
}

input InterestWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCourseInterest(data: CourseInterestCreateInput!): CourseInterest!
  createUserInterest(data: UserInterestCreateInput!): UserInterest!
  createWishlist(data: WishlistCreateInput!): Wishlist!
  createCourseVideos(data: CourseVideosCreateInput!): CourseVideos!
  createComCourse(data: ComCourseCreateInput!): ComCourse!
  createUserCourse(data: UserCourseCreateInput!): UserCourse!
  createCartItem(data: CartItemCreateInput!): CartItem!
  createOrder(data: OrderCreateInput!): Order!
  createVideo(data: VideoCreateInput!): Video!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createUser(data: UserCreateInput!): User!
  createInterest(data: InterestCreateInput!): Interest!
  createCategory(data: CategoryCreateInput!): Category!
  updateCourseInterest(
    data: CourseInterestUpdateInput!
    where: CourseInterestWhereUniqueInput!
  ): CourseInterest
  updateUserInterest(
    data: UserInterestUpdateInput!
    where: UserInterestWhereUniqueInput!
  ): UserInterest
  updateCourseVideos(
    data: CourseVideosUpdateInput!
    where: CourseVideosWhereUniqueInput!
  ): CourseVideos
  updateComCourse(
    data: ComCourseUpdateInput!
    where: ComCourseWhereUniqueInput!
  ): ComCourse
  updateUserCourse(
    data: UserCourseUpdateInput!
    where: UserCourseWhereUniqueInput!
  ): UserCourse
  updateCartItem(
    data: CartItemUpdateInput!
    where: CartItemWhereUniqueInput!
  ): CartItem
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  updateOrderItem(
    data: OrderItemUpdateInput!
    where: OrderItemWhereUniqueInput!
  ): OrderItem
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateInterest(
    data: InterestUpdateInput!
    where: InterestWhereUniqueInput!
  ): Interest
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category
  deleteCourseInterest(where: CourseInterestWhereUniqueInput!): CourseInterest
  deleteUserInterest(where: UserInterestWhereUniqueInput!): UserInterest
  deleteWishlist(where: WishlistWhereUniqueInput!): Wishlist
  deleteCourseVideos(where: CourseVideosWhereUniqueInput!): CourseVideos
  deleteComCourse(where: ComCourseWhereUniqueInput!): ComCourse
  deleteUserCourse(where: UserCourseWhereUniqueInput!): UserCourse
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteUser(where: UserWhereUniqueInput!): User
  deleteInterest(where: InterestWhereUniqueInput!): Interest
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  upsertCourseInterest(
    where: CourseInterestWhereUniqueInput!
    create: CourseInterestCreateInput!
    update: CourseInterestUpdateInput!
  ): CourseInterest!
  upsertUserInterest(
    where: UserInterestWhereUniqueInput!
    create: UserInterestCreateInput!
    update: UserInterestUpdateInput!
  ): UserInterest!
  upsertCourseVideos(
    where: CourseVideosWhereUniqueInput!
    create: CourseVideosCreateInput!
    update: CourseVideosUpdateInput!
  ): CourseVideos!
  upsertComCourse(
    where: ComCourseWhereUniqueInput!
    create: ComCourseCreateInput!
    update: ComCourseUpdateInput!
  ): ComCourse!
  upsertUserCourse(
    where: UserCourseWhereUniqueInput!
    create: UserCourseCreateInput!
    update: UserCourseUpdateInput!
  ): UserCourse!
  upsertCartItem(
    where: CartItemWhereUniqueInput!
    create: CartItemCreateInput!
    update: CartItemUpdateInput!
  ): CartItem!
  upsertOrder(
    where: OrderWhereUniqueInput!
    create: OrderCreateInput!
    update: OrderUpdateInput!
  ): Order!
  upsertVideo(
    where: VideoWhereUniqueInput!
    create: VideoCreateInput!
    update: VideoUpdateInput!
  ): Video!
  upsertOrderItem(
    where: OrderItemWhereUniqueInput!
    create: OrderItemCreateInput!
    update: OrderItemUpdateInput!
  ): OrderItem!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  upsertInterest(
    where: InterestWhereUniqueInput!
    create: InterestCreateInput!
    update: InterestUpdateInput!
  ): Interest!
  upsertCourse(
    where: CourseWhereUniqueInput!
    create: CourseCreateInput!
    update: CourseUpdateInput!
  ): Course!
  upsertCategory(
    where: CategoryWhereUniqueInput!
    create: CategoryCreateInput!
    update: CategoryUpdateInput!
  ): Category!
  updateManyComCourses(
    data: ComCourseUpdateManyMutationInput!
    where: ComCourseWhereInput
  ): BatchPayload!
  updateManyUserCourses(
    data: UserCourseUpdateManyMutationInput!
    where: UserCourseWhereInput
  ): BatchPayload!
  updateManyOrders(
    data: OrderUpdateManyMutationInput!
    where: OrderWhereInput
  ): BatchPayload!
  updateManyVideos(
    data: VideoUpdateManyMutationInput!
    where: VideoWhereInput
  ): BatchPayload!
  updateManyOrderItems(
    data: OrderItemUpdateManyMutationInput!
    where: OrderItemWhereInput
  ): BatchPayload!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  updateManyInterests(
    data: InterestUpdateManyMutationInput!
    where: InterestWhereInput
  ): BatchPayload!
  updateManyCourses(
    data: CourseUpdateManyMutationInput!
    where: CourseWhereInput
  ): BatchPayload!
  updateManyCategories(
    data: CategoryUpdateManyMutationInput!
    where: CategoryWhereInput
  ): BatchPayload!
  deleteManyCourseInterests(where: CourseInterestWhereInput): BatchPayload!
  deleteManyUserInterests(where: UserInterestWhereInput): BatchPayload!
  deleteManyWishlists(where: WishlistWhereInput): BatchPayload!
  deleteManyCourseVideoses(where: CourseVideosWhereInput): BatchPayload!
  deleteManyComCourses(where: ComCourseWhereInput): BatchPayload!
  deleteManyUserCourses(where: UserCourseWhereInput): BatchPayload!
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyInterests(where: InterestWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Order implements Node {
  id: ID!
  items(
    where: OrderItemWhereInput
    orderBy: OrderItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [OrderItem!]
  total: Int!
  user: User!
  charge: String!
}

"""
A connection to a list of items.
"""
type OrderConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  total: Int!
  charge: String!
  items: OrderItemCreateManyInput
  user: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type OrderEdge {
  """
  The item at the end of the edge.
  """
  node: Order!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type OrderItem implements Node {
  id: ID!
  title: String
  description: String!
  thumbnail: String!
  price: Float!
  category: Category!
  user: User
}

"""
A connection to a list of items.
"""
type OrderItemConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  id: ID
  title: String
  description: String!
  thumbnail: String!
  price: Float!
  category: CategoryCreateOneInput!
  user: UserCreateOneInput
}

input OrderItemCreateManyInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type OrderItemEdge {
  """
  The item at the end of the edge.
  """
  node: OrderItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  thumbnail_ASC
  thumbnail_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderItemPreviousValues {
  id: ID!
  title: String
  description: String!
  thumbnail: String!
  price: Float!
}

input OrderItemScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderItemScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderItemScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderItemScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  thumbnail: String

  """
  All values that are not equal to given value.
  """
  thumbnail_not: String

  """
  All values that are contained in given list.
  """
  thumbnail_in: [String!]

  """
  All values that are not contained in given list.
  """
  thumbnail_not_in: [String!]

  """
  All values less than the given value.
  """
  thumbnail_lt: String

  """
  All values less than or equal the given value.
  """
  thumbnail_lte: String

  """
  All values greater than the given value.
  """
  thumbnail_gt: String

  """
  All values greater than or equal the given value.
  """
  thumbnail_gte: String

  """
  All values containing the given string.
  """
  thumbnail_contains: String

  """
  All values not containing the given string.
  """
  thumbnail_not_contains: String

  """
  All values starting with the given string.
  """
  thumbnail_starts_with: String

  """
  All values not starting with the given string.
  """
  thumbnail_not_starts_with: String

  """
  All values ending with the given string.
  """
  thumbnail_ends_with: String

  """
  All values not ending with the given string.
  """
  thumbnail_not_ends_with: String
  price: Float

  """
  All values that are not equal to given value.
  """
  price_not: Float

  """
  All values that are contained in given list.
  """
  price_in: [Float!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Float!]

  """
  All values less than the given value.
  """
  price_lt: Float

  """
  All values less than or equal the given value.
  """
  price_lte: Float

  """
  All values greater than the given value.
  """
  price_gt: Float

  """
  All values greater than or equal the given value.
  """
  price_gte: Float
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderItemSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderItemSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
}

input OrderItemUpdateDataInput {
  title: String
  description: String
  thumbnail: String
  price: Float
  category: CategoryUpdateOneRequiredInput
  user: UserUpdateOneInput
}

input OrderItemUpdateInput {
  title: String
  description: String
  thumbnail: String
  price: Float
  category: CategoryUpdateOneRequiredInput
  user: UserUpdateOneInput
}

input OrderItemUpdateManyDataInput {
  title: String
  description: String
  thumbnail: String
  price: Float
}

input OrderItemUpdateManyInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  delete: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  upsert: [OrderItemUpsertWithWhereUniqueNestedInput!]
}

input OrderItemUpdateManyMutationInput {
  title: String
  description: String
  thumbnail: String
  price: Float
}

input OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput!
  data: OrderItemUpdateManyDataInput!
}

input OrderItemUpdateWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateDataInput!
}

input OrderItemUpsertWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateDataInput!
  create: OrderItemCreateInput!
}

input OrderItemWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderItemWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderItemWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderItemWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  thumbnail: String

  """
  All values that are not equal to given value.
  """
  thumbnail_not: String

  """
  All values that are contained in given list.
  """
  thumbnail_in: [String!]

  """
  All values that are not contained in given list.
  """
  thumbnail_not_in: [String!]

  """
  All values less than the given value.
  """
  thumbnail_lt: String

  """
  All values less than or equal the given value.
  """
  thumbnail_lte: String

  """
  All values greater than the given value.
  """
  thumbnail_gt: String

  """
  All values greater than or equal the given value.
  """
  thumbnail_gte: String

  """
  All values containing the given string.
  """
  thumbnail_contains: String

  """
  All values not containing the given string.
  """
  thumbnail_not_contains: String

  """
  All values starting with the given string.
  """
  thumbnail_starts_with: String

  """
  All values not starting with the given string.
  """
  thumbnail_not_starts_with: String

  """
  All values ending with the given string.
  """
  thumbnail_ends_with: String

  """
  All values not ending with the given string.
  """
  thumbnail_not_ends_with: String
  price: Float

  """
  All values that are not equal to given value.
  """
  price_not: Float

  """
  All values that are contained in given list.
  """
  price_in: [Float!]

  """
  All values that are not contained in given list.
  """
  price_not_in: [Float!]

  """
  All values less than the given value.
  """
  price_lt: Float

  """
  All values less than or equal the given value.
  """
  price_lte: Float

  """
  All values greater than the given value.
  """
  price_gt: Float

  """
  All values greater than or equal the given value.
  """
  price_gte: Float
  category: CategoryWhereInput
  user: UserWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  charge_ASC
  charge_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  total: Int!
  charge: String!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  total: Int
  charge: String
  items: OrderItemUpdateManyInput
  user: UserUpdateOneRequiredInput
}

input OrderUpdateManyMutationInput {
  total: Int
  charge: String
}

input OrderWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OrderWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [OrderWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [OrderWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  total: Int

  """
  All values that are not equal to given value.
  """
  total_not: Int

  """
  All values that are contained in given list.
  """
  total_in: [Int!]

  """
  All values that are not contained in given list.
  """
  total_not_in: [Int!]

  """
  All values less than the given value.
  """
  total_lt: Int

  """
  All values less than or equal the given value.
  """
  total_lte: Int

  """
  All values greater than the given value.
  """
  total_gt: Int

  """
  All values greater than or equal the given value.
  """
  total_gte: Int
  charge: String

  """
  All values that are not equal to given value.
  """
  charge_not: String

  """
  All values that are contained in given list.
  """
  charge_in: [String!]

  """
  All values that are not contained in given list.
  """
  charge_not_in: [String!]

  """
  All values less than the given value.
  """
  charge_lt: String

  """
  All values less than or equal the given value.
  """
  charge_lte: String

  """
  All values greater than the given value.
  """
  charge_gt: String

  """
  All values greater than or equal the given value.
  """
  charge_gte: String

  """
  All values containing the given string.
  """
  charge_contains: String

  """
  All values not containing the given string.
  """
  charge_not_contains: String

  """
  All values starting with the given string.
  """
  charge_starts_with: String

  """
  All values not starting with the given string.
  """
  charge_not_starts_with: String

  """
  All values ending with the given string.
  """
  charge_ends_with: String

  """
  All values not ending with the given string.
  """
  charge_not_ends_with: String
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  user: UserWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  INSTRUTOR
  VIDEOCREATE
  COURSECREATE
  PERMISSIONUPDATE
}

type Query {
  courseInterests(
    where: CourseInterestWhereInput
    orderBy: CourseInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CourseInterest]!
  userInterests(
    where: UserInterestWhereInput
    orderBy: UserInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserInterest]!
  courseVideoses(
    where: CourseVideosWhereInput
    orderBy: CourseVideosOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CourseVideos]!
  comCourses(
    where: ComCourseWhereInput
    orderBy: ComCourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ComCourse]!
  userCourses(
    where: UserCourseWhereInput
    orderBy: UserCourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserCourse]!
  cartItems(
    where: CartItemWhereInput
    orderBy: CartItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CartItem]!
  orders(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Order]!
  videos(
    where: VideoWhereInput
    orderBy: VideoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Video]!
  orderItems(
    where: OrderItemWhereInput
    orderBy: OrderItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [OrderItem]!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  interests(
    where: InterestWhereInput
    orderBy: InterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Interest]!
  courses(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Course]!
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  courseInterest(where: CourseInterestWhereUniqueInput!): CourseInterest
  userInterest(where: UserInterestWhereUniqueInput!): UserInterest
  wishlist(where: WishlistWhereUniqueInput!): Wishlist
  courseVideos(where: CourseVideosWhereUniqueInput!): CourseVideos
  comCourse(where: ComCourseWhereUniqueInput!): ComCourse
  userCourse(where: UserCourseWhereUniqueInput!): UserCourse
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  order(where: OrderWhereUniqueInput!): Order
  video(where: VideoWhereUniqueInput!): Video
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  user(where: UserWhereUniqueInput!): User
  interest(where: InterestWhereUniqueInput!): Interest
  category(where: CategoryWhereUniqueInput!): Category
  courseInterestsConnection(
    where: CourseInterestWhereInput
    orderBy: CourseInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CourseInterestConnection!
  userInterestsConnection(
    where: UserInterestWhereInput
    orderBy: UserInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserInterestConnection!
  courseVideosesConnection(
    where: CourseVideosWhereInput
    orderBy: CourseVideosOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CourseVideosConnection!
  comCoursesConnection(
    where: ComCourseWhereInput
    orderBy: ComCourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ComCourseConnection!
  userCoursesConnection(
    where: UserCourseWhereInput
    orderBy: UserCourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserCourseConnection!
  cartItemsConnection(
    where: CartItemWhereInput
    orderBy: CartItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CartItemConnection!
  ordersConnection(
    where: OrderWhereInput
    orderBy: OrderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrderConnection!
  videosConnection(
    where: VideoWhereInput
    orderBy: VideoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): VideoConnection!
  orderItemsConnection(
    where: OrderItemWhereInput
    orderBy: OrderItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): OrderItemConnection!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  interestsConnection(
    where: InterestWhereInput
    orderBy: InterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): InterestConnection!
  coursesConnection(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CourseConnection!
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

enum State {
  PUBLISHED
  UNPUBLISHED
}

type Subscription {
  courseInterest(
    where: CourseInterestSubscriptionWhereInput
  ): CourseInterestSubscriptionPayload
  userInterest(
    where: UserInterestSubscriptionWhereInput
  ): UserInterestSubscriptionPayload
  courseVideos(
    where: CourseVideosSubscriptionWhereInput
  ): CourseVideosSubscriptionPayload
  comCourse(
    where: ComCourseSubscriptionWhereInput
  ): ComCourseSubscriptionPayload
  userCourse(
    where: UserCourseSubscriptionWhereInput
  ): UserCourseSubscriptionPayload
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
  orderItem(
    where: OrderItemSubscriptionWhereInput
  ): OrderItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  interest(where: InterestSubscriptionWhereInput): InterestSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  interests(
    where: UserInterestWhereInput
    orderBy: UserInterestOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserInterest!]
  resetToken: String
  resetTokenExpiry: Float
  permission: [Permission!]!
  courses(
    where: UserCourseWhereInput
    orderBy: UserCourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserCourse!]
  cart(
    where: CartItemWhereInput
    orderBy: CartItemOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CartItem!]
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

type UserCourse implements Node {
  id: ID!
  user: User!
  course: Course!
  watched: Boolean!
}

"""
A connection to a list of items.
"""
type UserCourseConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserCourseEdge]!
  aggregate: AggregateUserCourse!
}

input UserCourseCreateInput {
  id: ID
  watched: Boolean
  user: UserCreateOneWithoutCoursesInput!
  course: CourseCreateOneInput!
}

input UserCourseCreateManyWithoutUserInput {
  create: [UserCourseCreateWithoutUserInput!]
  connect: [UserCourseWhereUniqueInput!]
}

input UserCourseCreateWithoutUserInput {
  id: ID
  watched: Boolean
  course: CourseCreateOneInput!
}

"""
An edge in a connection.
"""
type UserCourseEdge {
  """
  The item at the end of the edge.
  """
  node: UserCourse!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserCourseOrderByInput {
  id_ASC
  id_DESC
  watched_ASC
  watched_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserCoursePreviousValues {
  id: ID!
  watched: Boolean!
}

input UserCourseScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserCourseScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserCourseScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserCourseScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  watched: Boolean

  """
  All values that are not equal to given value.
  """
  watched_not: Boolean
}

type UserCourseSubscriptionPayload {
  mutation: MutationType!
  node: UserCourse
  updatedFields: [String!]
  previousValues: UserCoursePreviousValues
}

input UserCourseSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserCourseSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserCourseSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserCourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserCourseWhereInput
}

input UserCourseUpdateInput {
  watched: Boolean
  user: UserUpdateOneRequiredWithoutCoursesInput
  course: CourseUpdateOneRequiredInput
}

input UserCourseUpdateManyDataInput {
  watched: Boolean
}

input UserCourseUpdateManyMutationInput {
  watched: Boolean
}

input UserCourseUpdateManyWithoutUserInput {
  create: [UserCourseCreateWithoutUserInput!]
  connect: [UserCourseWhereUniqueInput!]
  set: [UserCourseWhereUniqueInput!]
  disconnect: [UserCourseWhereUniqueInput!]
  delete: [UserCourseWhereUniqueInput!]
  update: [UserCourseUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserCourseUpdateManyWithWhereNestedInput!]
  deleteMany: [UserCourseScalarWhereInput!]
  upsert: [UserCourseUpsertWithWhereUniqueWithoutUserInput!]
}

input UserCourseUpdateManyWithWhereNestedInput {
  where: UserCourseScalarWhereInput!
  data: UserCourseUpdateManyDataInput!
}

input UserCourseUpdateWithoutUserDataInput {
  watched: Boolean
  course: CourseUpdateOneRequiredInput
}

input UserCourseUpdateWithWhereUniqueWithoutUserInput {
  where: UserCourseWhereUniqueInput!
  data: UserCourseUpdateWithoutUserDataInput!
}

input UserCourseUpsertWithWhereUniqueWithoutUserInput {
  where: UserCourseWhereUniqueInput!
  update: UserCourseUpdateWithoutUserDataInput!
  create: UserCourseCreateWithoutUserInput!
}

input UserCourseWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserCourseWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserCourseWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserCourseWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  watched: Boolean

  """
  All values that are not equal to given value.
  """
  watched_not: Boolean
  user: UserWhereInput
  course: CourseWhereInput
}

input UserCourseWhereUniqueInput {
  id: ID
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permission: UserCreatepermissionInput
  interests: UserInterestCreateManyWithoutUserInput
  courses: UserCourseCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  wishlist: WishlistCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWishlistInput {
  create: UserCreateWithoutWishlistInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionInput {
  set: [Permission!]
}

input UserCreateWithoutCartInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permission: UserCreatepermissionInput
  interests: UserInterestCreateManyWithoutUserInput
  courses: UserCourseCreateManyWithoutUserInput
  wishlist: WishlistCreateManyWithoutUserInput
}

input UserCreateWithoutCoursesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permission: UserCreatepermissionInput
  interests: UserInterestCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  wishlist: WishlistCreateManyWithoutUserInput
}

input UserCreateWithoutInterestsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permission: UserCreatepermissionInput
  courses: UserCourseCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
  wishlist: WishlistCreateManyWithoutUserInput
}

input UserCreateWithoutWishlistInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permission: UserCreatepermissionInput
  interests: UserInterestCreateManyWithoutUserInput
  courses: UserCourseCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type UserInterest implements Node {
  id: ID!
  interest: Interest!
  user: User!
}

"""
A connection to a list of items.
"""
type UserInterestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserInterestEdge]!
  aggregate: AggregateUserInterest!
}

input UserInterestCreateInput {
  id: ID
  interest: InterestCreateOneInput!
  user: UserCreateOneWithoutInterestsInput!
}

input UserInterestCreateManyWithoutUserInput {
  create: [UserInterestCreateWithoutUserInput!]
  connect: [UserInterestWhereUniqueInput!]
}

input UserInterestCreateWithoutUserInput {
  id: ID
  interest: InterestCreateOneInput!
}

"""
An edge in a connection.
"""
type UserInterestEdge {
  """
  The item at the end of the edge.
  """
  node: UserInterest!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserInterestOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserInterestPreviousValues {
  id: ID!
}

input UserInterestScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserInterestScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserInterestScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserInterestScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type UserInterestSubscriptionPayload {
  mutation: MutationType!
  node: UserInterest
  updatedFields: [String!]
  previousValues: UserInterestPreviousValues
}

input UserInterestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserInterestSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserInterestSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserInterestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserInterestWhereInput
}

input UserInterestUpdateInput {
  interest: InterestUpdateOneRequiredInput
  user: UserUpdateOneRequiredWithoutInterestsInput
}

input UserInterestUpdateManyWithoutUserInput {
  create: [UserInterestCreateWithoutUserInput!]
  connect: [UserInterestWhereUniqueInput!]
  set: [UserInterestWhereUniqueInput!]
  disconnect: [UserInterestWhereUniqueInput!]
  delete: [UserInterestWhereUniqueInput!]
  update: [UserInterestUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserInterestScalarWhereInput!]
  upsert: [UserInterestUpsertWithWhereUniqueWithoutUserInput!]
}

input UserInterestUpdateWithoutUserDataInput {
  interest: InterestUpdateOneRequiredInput
}

input UserInterestUpdateWithWhereUniqueWithoutUserInput {
  where: UserInterestWhereUniqueInput!
  data: UserInterestUpdateWithoutUserDataInput!
}

input UserInterestUpsertWithWhereUniqueWithoutUserInput {
  where: UserInterestWhereUniqueInput!
  update: UserInterestUpdateWithoutUserDataInput!
  create: UserInterestCreateWithoutUserInput!
}

input UserInterestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserInterestWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserInterestWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserInterestWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  interest: InterestWhereInput
  user: UserWhereInput
}

input UserInterestWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permission: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
  interests: UserInterestUpdateManyWithoutUserInput
  courses: UserCourseUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
  wishlist: WishlistUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
  interests: UserInterestUpdateManyWithoutUserInput
  courses: UserCourseUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
  wishlist: WishlistUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneRequiredWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCoursesDataInput
  upsert: UserUpsertWithoutCoursesInput
}

input UserUpdateOneRequiredWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInterestsDataInput
  upsert: UserUpsertWithoutInterestsInput
}

input UserUpdateOneRequiredWithoutWishlistInput {
  create: UserCreateWithoutWishlistInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutWishlistDataInput
  upsert: UserUpsertWithoutWishlistInput
}

input UserUpdatepermissionInput {
  set: [Permission!]
}

input UserUpdateWithoutCartDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
  interests: UserInterestUpdateManyWithoutUserInput
  courses: UserCourseUpdateManyWithoutUserInput
  wishlist: WishlistUpdateManyWithoutUserInput
}

input UserUpdateWithoutCoursesDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
  interests: UserInterestUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
  wishlist: WishlistUpdateManyWithoutUserInput
}

input UserUpdateWithoutInterestsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
  courses: UserCourseUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
  wishlist: WishlistUpdateManyWithoutUserInput
}

input UserUpdateWithoutWishlistDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permission: UserUpdatepermissionInput
  interests: UserInterestUpdateManyWithoutUserInput
  courses: UserCourseUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutCoursesInput {
  update: UserUpdateWithoutCoursesDataInput!
  create: UserCreateWithoutCoursesInput!
}

input UserUpsertWithoutInterestsInput {
  update: UserUpdateWithoutInterestsDataInput!
  create: UserCreateWithoutInterestsInput!
}

input UserUpsertWithoutWishlistInput {
  update: UserUpdateWithoutWishlistDataInput!
  create: UserCreateWithoutWishlistInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  resetToken: String

  """
  All values that are not equal to given value.
  """
  resetToken_not: String

  """
  All values that are contained in given list.
  """
  resetToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  resetToken_not_in: [String!]

  """
  All values less than the given value.
  """
  resetToken_lt: String

  """
  All values less than or equal the given value.
  """
  resetToken_lte: String

  """
  All values greater than the given value.
  """
  resetToken_gt: String

  """
  All values greater than or equal the given value.
  """
  resetToken_gte: String

  """
  All values containing the given string.
  """
  resetToken_contains: String

  """
  All values not containing the given string.
  """
  resetToken_not_contains: String

  """
  All values starting with the given string.
  """
  resetToken_starts_with: String

  """
  All values not starting with the given string.
  """
  resetToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  resetToken_ends_with: String

  """
  All values not ending with the given string.
  """
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """
  All values that are not equal to given value.
  """
  resetTokenExpiry_not: Float

  """
  All values that are contained in given list.
  """
  resetTokenExpiry_in: [Float!]

  """
  All values that are not contained in given list.
  """
  resetTokenExpiry_not_in: [Float!]

  """
  All values less than the given value.
  """
  resetTokenExpiry_lt: Float

  """
  All values less than or equal the given value.
  """
  resetTokenExpiry_lte: Float

  """
  All values greater than the given value.
  """
  resetTokenExpiry_gt: Float

  """
  All values greater than or equal the given value.
  """
  resetTokenExpiry_gte: Float
  interests_every: UserInterestWhereInput
  interests_some: UserInterestWhereInput
  interests_none: UserInterestWhereInput
  courses_every: UserCourseWhereInput
  courses_some: UserCourseWhereInput
  courses_none: UserCourseWhereInput
  cart_every: CartItemWhereInput
  cart_some: CartItemWhereInput
  cart_none: CartItemWhereInput
  wishlist_every: WishlistWhereInput
  wishlist_some: WishlistWhereInput
  wishlist_none: WishlistWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Video implements Node {
  id: ID!
  title: String!
  description: String!
  state: State!
  user: User!
  urlVideo: String!
  file: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A connection to a list of items.
"""
type VideoConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  id: ID
  title: String!
  description: String!
  state: State
  urlVideo: String!
  file: String
  user: UserCreateOneInput!
}

input VideoCreateOneInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

"""
An edge in a connection.
"""
type VideoEdge {
  """
  The item at the end of the edge.
  """
  node: Video!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  state_ASC
  state_DESC
  urlVideo_ASC
  urlVideo_DESC
  file_ASC
  file_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VideoPreviousValues {
  id: ID!
  title: String!
  description: String!
  state: State!
  urlVideo: String!
  file: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VideoSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [VideoSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [VideoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
}

input VideoUpdateDataInput {
  title: String
  description: String
  state: State
  urlVideo: String
  file: String
  user: UserUpdateOneRequiredInput
}

input VideoUpdateInput {
  title: String
  description: String
  state: State
  urlVideo: String
  file: String
  user: UserUpdateOneRequiredInput
}

input VideoUpdateManyMutationInput {
  title: String
  description: String
  state: State
  urlVideo: String
  file: String
}

input VideoUpdateOneInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VideoUpdateDataInput
  upsert: VideoUpsertNestedInput
}

input VideoUpsertNestedInput {
  update: VideoUpdateDataInput!
  create: VideoCreateInput!
}

input VideoWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VideoWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [VideoWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [VideoWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  state: State

  """
  All values that are not equal to given value.
  """
  state_not: State

  """
  All values that are contained in given list.
  """
  state_in: [State!]

  """
  All values that are not contained in given list.
  """
  state_not_in: [State!]
  urlVideo: String

  """
  All values that are not equal to given value.
  """
  urlVideo_not: String

  """
  All values that are contained in given list.
  """
  urlVideo_in: [String!]

  """
  All values that are not contained in given list.
  """
  urlVideo_not_in: [String!]

  """
  All values less than the given value.
  """
  urlVideo_lt: String

  """
  All values less than or equal the given value.
  """
  urlVideo_lte: String

  """
  All values greater than the given value.
  """
  urlVideo_gt: String

  """
  All values greater than or equal the given value.
  """
  urlVideo_gte: String

  """
  All values containing the given string.
  """
  urlVideo_contains: String

  """
  All values not containing the given string.
  """
  urlVideo_not_contains: String

  """
  All values starting with the given string.
  """
  urlVideo_starts_with: String

  """
  All values not starting with the given string.
  """
  urlVideo_not_starts_with: String

  """
  All values ending with the given string.
  """
  urlVideo_ends_with: String

  """
  All values not ending with the given string.
  """
  urlVideo_not_ends_with: String
  file: String

  """
  All values that are not equal to given value.
  """
  file_not: String

  """
  All values that are contained in given list.
  """
  file_in: [String!]

  """
  All values that are not contained in given list.
  """
  file_not_in: [String!]

  """
  All values less than the given value.
  """
  file_lt: String

  """
  All values less than or equal the given value.
  """
  file_lte: String

  """
  All values greater than the given value.
  """
  file_gt: String

  """
  All values greater than or equal the given value.
  """
  file_gte: String

  """
  All values containing the given string.
  """
  file_contains: String

  """
  All values not containing the given string.
  """
  file_not_contains: String

  """
  All values starting with the given string.
  """
  file_starts_with: String

  """
  All values not starting with the given string.
  """
  file_not_starts_with: String

  """
  All values ending with the given string.
  """
  file_ends_with: String

  """
  All values not ending with the given string.
  """
  file_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input VideoWhereUniqueInput {
  id: ID
}

type Wishlist implements Node {
  id: ID!
  user: User!
  course: Course!
}

"""
A connection to a list of items.
"""
type WishlistConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [WishlistEdge]!
  aggregate: AggregateWishlist!
}

input WishlistCreateInput {
  id: ID
  user: UserCreateOneWithoutWishlistInput!
  course: CourseCreateOneInput!
}

input WishlistCreateManyWithoutUserInput {
  create: [WishlistCreateWithoutUserInput!]
  connect: [WishlistWhereUniqueInput!]
}

input WishlistCreateWithoutUserInput {
  id: ID
  course: CourseCreateOneInput!
}

"""
An edge in a connection.
"""
type WishlistEdge {
  """
  The item at the end of the edge.
  """
  node: Wishlist!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum WishlistOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WishlistPreviousValues {
  id: ID!
}

input WishlistScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WishlistScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WishlistScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WishlistScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type WishlistSubscriptionPayload {
  mutation: MutationType!
  node: Wishlist
  updatedFields: [String!]
  previousValues: WishlistPreviousValues
}

input WishlistSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WishlistSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WishlistSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WishlistSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WishlistWhereInput
}

input WishlistUpdateInput {
  user: UserUpdateOneRequiredWithoutWishlistInput
  course: CourseUpdateOneRequiredInput
}

input WishlistUpdateManyWithoutUserInput {
  create: [WishlistCreateWithoutUserInput!]
  connect: [WishlistWhereUniqueInput!]
  set: [WishlistWhereUniqueInput!]
  disconnect: [WishlistWhereUniqueInput!]
  delete: [WishlistWhereUniqueInput!]
  update: [WishlistUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [WishlistScalarWhereInput!]
  upsert: [WishlistUpsertWithWhereUniqueWithoutUserInput!]
}

input WishlistUpdateWithoutUserDataInput {
  course: CourseUpdateOneRequiredInput
}

input WishlistUpdateWithWhereUniqueWithoutUserInput {
  where: WishlistWhereUniqueInput!
  data: WishlistUpdateWithoutUserDataInput!
}

input WishlistUpsertWithWhereUniqueWithoutUserInput {
  where: WishlistWhereUniqueInput!
  update: WishlistUpdateWithoutUserDataInput!
  create: WishlistCreateWithoutUserInput!
}

input WishlistWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [WishlistWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [WishlistWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [WishlistWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  user: UserWhereInput
  course: CourseWhereInput
}

input WishlistWhereUniqueInput {
  id: ID
}
