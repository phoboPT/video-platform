#import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type User {
  id: ID!
  name: String!
  email: String!
  permission: [Permission]
  interests: [UserInterest!]!
  cart: [CartItem!]!
  courses: [UserCourse!]!
  wishlist: [Wishlist!]
}

type Course {
  id: ID!
  videos: [CourseVideos!]!
  title: String
  description: String!
  thumbnail: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: State
  price: Float!
  category: Category!
  interest: [CourseInterest!]!
  count: Int
  wished: Boolean
}

type Mutation {
  createVideo(
    title: String!
    description: String
    urlVideo: String
    course: ID!
    file: String
  ): Video!
  updateVideo(
    id: ID!
    title: String
    description: String
    category: String
  ): Video!
  deleteVideo(id: ID!): Video
  createCategory(name: String!): Category!
  updateCategory(id: ID!, name: String!): Video!
  deleteCategory(id: ID!): Category
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  updatePassword(id: ID!, password: String, confirmPassword: String): User!
  updateUser(id: ID!, name: String, email: String): User!
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  createCourse(
    title: String!
    thumbnail: String!
    description: String!
    price: Float!
    category: ID!
    state: String!
  ): Course!
  addTargetCourse(courseId: ID!, interestId: ID!): Course!
  removeFromCourse(id: ID!, courseId: ID!): Course
  updateCourse(
    id: ID!
    title: String
    thumbnail: String
    description: String
    state: String
  ): Course!
  deleteCourse(id: ID!): CourseVideos
  # createComCourse(courseId: ID!, comment: String!): ComCourse!
  # updateComCourse(id: ID!, comment: String): ComCourse!
  # deleteComCourse(id: ID!): ComCourse
  addToCart(id: ID!): CartItem!
  removeFromCart(id: ID!): CartItem!
  addTargetUser(interestId: ID!): User!
  removeTargetUser(interestId: ID!): User!
  createOrder(token: String!): Order
  addToWish(id: ID!): Wishlist!
  removeFromWish(id: ID!): Wishlist!
  buyCourseFree(id: ID!): UserCourse
}

type Query {
  #searchbar
  videosUserSearch(
    where: VideoWhereInput
    orderBy: VideoOrderByInput
    skip: Int
    first: Int
  ): [Video]

  coursesSearch(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  # querys sellect all
  categories: [Category]!
  users: [User]!

  interests: [Interest!]!
  userInterests: [UserInterest]!
  courseInterests(where: CourseInterestWhereInput): [CourseInterest]!

  # querys selecionar por id
  video(where: VideoWhereUniqueInput!): Video
  category(where: CategoryWhereUniqueInput!): Category
  user(where: UserWhereUniqueInput!): User
  course(where: CourseWhereUniqueInput!): Course!
  # comCourse(where: ComCourseWhereUniqueInput!): ComCourse
  coursesFilter(category: ID, author: ID): [UserCourse]
  # querys selecionar tudo com argumentos
  videosUser(
    where: VideoWhereInput
    orderBy: VideoOrderByInput
    skip: Int
    first: Int
  ): [Video]

  videos(
    where: VideoWhereInput
    orderBy: VideoOrderByInput
    skip: Int
    first: Int
  ): [Video]!

  courses(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  videosSearch(where: VideoWhereInput!): [Video]

  #Listar todos os cursos em que o user tenha o mesmo interest do curso
  coursesUserInterestList(
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  coursesList(orderBy: String, skip: Int, first: Int): [Course]

  # listar todos os comentarios de um curso
  # comCourseList(id: ID!, orderBy: ComCourseOrderByInput): [ComCourse]
  # Listar todos os cursos de um User
  coursesUser: [Course]
  # Information about actual user
  me: User

  #pagination
  videosConnection(where: VideoWhereInput): VideoConnection!

  coursesConnection(data: String): CourseConnection!
  wishlists(where: WishlistWhereInput): [Wishlist]
}
