#import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type StatsInstrutor {
  cursos: Int
  alunos: Int
  avaliacoes: Int
}

type User {
  id: ID!
  thumbnail: String
  profession: String
  description: String
  name: String!
  email: String!
  password: String
  permission: [Permission]
  interests: [UserInterest!]!
  cart: [CartItem!]!
  courses: [UserCourse!]!
  wishlist: [Wishlist!]
  videoUser: [VideoUser]
  paymentBill: [PaymentBill]
}

type Stats {
  id: ID!
  videos: [CourseVideos!]!
  title: String
  description: String!
  thumbnail: String
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: State
  price: Float!
  totalRate: Float
  totalComments: Int
  # Variaveis nao definidas em datamodel mas necessarias backend
  count: Int
  course: Course
  countOrders: Int
  amountOrders: Float
}

type Course {
  id: ID!
  videos: [CourseVideos!]!
  title: String
  description: String!
  thumbnail: String
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: State
  price: Float!
  category: Category!
  interest: [CourseInterest!]!
  wished: Boolean
  totalRate: Float
  totalComments: Int
  section: String
  # Variaveis nao definidas em datamodel mas necessarias backend
  count: Int
}

type Mutation {
  createInstructor(message: String!): BecomeInstructor!

  createVideo(
    title: String!
    urlVideo: String
    course: ID!
    file: String
    isUpdate: Boolean!
    videoId: ID
    duration: String
  ): Video!

  updateVideoUser(id: ID!, watched: Boolean): Video!

  # standby waitting for backoffice
  createInterest(name: String!, thumbnail: String!): Interest!
  updateInterest(id: ID!, name: String!, thumbnail: String): Interest!
  deleteInterest(id: ID!): Interest!

  createCategory(name: String!): Category!
  updateCategory(id: ID!, name: String!): Category!
  deleteCategory(id: ID!): Category!

  createCountry(name: String!, code: String!): Country!
  updateCountry(id: ID!, name: String!, code: String): Country!
  deleteCountry(id: ID!): Country!

  signup(
    email: String!
    password: String!
    name: String!
    thumbnail: String
  ): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  updatePassword(id: ID!, password: String, confirmPassword: String): User!
  updateUser(
    id: ID!
    name: String
    email: String
    thumbnail: String
    description: String
    profession: String
  ): User!
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  saveCourse(
    title: String
    thumbnail: String
    description: String
    price: Float
    category: ID
    state: String
    section: String
    id: ID
    idsToDelete: [String]
  ): Course!
  addTargetCourse(courseId: ID!, interestId: ID!): Course!
  removeFromCourse(id: ID!, courseId: ID!): Course
  deleteCourse(id: ID!): Course
  createRateCourse(courseId: ID!, comment: String!, rating: Float!): RateCourse!
  updateRateCourse(id: ID!, comment: String, rate: Float): RateCourse!
  deleteRateCourse(id: ID!): RateCourse
  addToCart(id: ID!): CartItem!
  removeFromCart(id: ID!): CartItem!
  addTargetUser(interestId: ID!): User!
  removeTargetUser(interestId: ID!): User!
  removeTargetCourse(interestId: ID!): Course!
  createOrder(
    token: String!
    name: String
    email: String
    address: String
    city: String
    state: String
    zipCode: String
    country: ID
    nif: Int
    billId: ID
  ): Order
  addToWish(id: ID!): Wishlist!
  removeFromWish(id: ID!): Wishlist!
  buyCourseFree(id: ID!): UserCourse
  paypalCheckout(data: [String]): Order
  executePaypal(
    paymentId: String
    token: String
    payerId: String
    name: String
    email: String
    address: String
    city: String
    state: String
    zipCode: String
    country: ID
    billId: ID
    nif: Int
  ): SuccessMessage
}

type Query {
  #searchbar
  checkUserRated(courseId: ID): SuccessMessage

  coursesSearch(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  authorSearch(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  videoUsers(where: VideoWhereInput): [VideoUser]
  videoItems(where: VideoWhereInput): [VideoItem]

  # querys sellect all
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    first: Int
  ): [Category]!

  countries(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    first: Int
  ): [Country]!
  interests(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    first: Int
  ): [Interest!]!

  becomeInstructors(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    first: Int
  ): [BecomeInstructor!]!

  # querys selecionar por id
  category(where: CategoryWhereUniqueInput!): Category!
  video(where: VideoWhereUniqueInput!): Video
  categorie(where: CategoryWhereUniqueInput!): Category
  user(where: UserWhereUniqueInput!): User
  course(where: CourseWhereUniqueInput, orderBy: CourseOrderByInput): Course
  rateCourse(where: RateCourseWhereUniqueInput!): RateCourse
  coursesFilter(category: ID, author: ID): [UserCourse]
  ordersUser(skip: Int, first: Int): [Order]!
  paymentBill: [PaymentBill]
  # querys selecionar tudo com argumentos
  videosFromUser(
    where: VideoWhereInput
    orderBy: VideoOrderByInput
    skip: Int
    first: Int
  ): [Video]

  courses(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  #LISTAS DA HOME PAGE
  coursesUserInterestList(
    orderBy: CourseOrderByInput
    skip: Int
    first: Int
  ): [Course]

  coursesList(orderBy: String, skip: Int, first: Int): [Course]

  coursesRating(orderBy: CourseOrderByInput, skip: Int, first: Int): [Course]

  # listar todos os comentarios de um curso
  rateCourseList(id: ID!, orderBy: RateCourseOrderByInput): [RateCourse]
  # Listar todos os cursos de um User
  coursesUser(orderBy: CourseOrderByInput, skip: Int, first: Int): [Course]
  coursesInstructor(id: ID!): [Course]
  userCourses(where: UserCourseWhereInput): [UserCourse]

  # Information about actual user
  me: User

  #pagination
  coursesConnection(data: String): CourseConnection!
  coursesUserConnection(data: String): CourseConnection!
  categoriesConnection(data: String): CategoryConnection!
  interestsConnection(data: String): InterestConnection!
  countriesConnection(data: String): CountryConnection!

  wishlists(where: WishlistWhereInput): [Wishlist]
  #Stats Instrutor Page
  instrutorStats(id: ID!): StatsInstrutor
  #Stats
  ordersUserStats: Stats
  coursesStats: [Stats]
  sellsByCourse(id: ID): [Stats]
  coursesStatsByDate(initialDate: String): [Stats]
  coursesCategory(category: [ID], orderBy: String, author: String): [Course]

  pedidoInstructor: [BecomeInstructor]

  # used to insert the countries data in the db
  # insertData: Course
}
